# -*- coding: utf-8 -*-
"""P3_texture_classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s4RICeq0j12XhHpGHh7PUKB3F-7lDy3W
"""

import numpy as np 
import matplotlib.pyplot as plt
from matplotlib import image
from matplotlib import pyplot
from skimage.feature import greycomatrix, greycoprops
from skimage import io
from skimage.color import rgb2gray
from PIL import Image
import cv2
import numpy as np
# example of converting an image with the Keras API
import tensorflow as tf
import keras
import glob
import os

from google.colab import drive 
drive.mount('/content/gdrive')

!ls "gdrive/My Drive/Colab Notebooks/XLA/Splited/train/"

"""Load Images"""

train_images = []
train_labels = [] 
for directory_path in glob.glob('gdrive/My Drive/Colab Notebooks/XLA/Splited/train/*'):
    label = directory_path.split("/")[-1]   
    for img_path in glob.glob(os.path.join(directory_path, "*.jpg")):
        im = tf.keras.utils.load_img(img_path, color_mode ='grayscale')
        new_im = np.asarray(im)
        train_images.append(new_im)
        train_labels.append(label)
      
train_images = np.array(train_images)
train_labels = np.array(train_labels)

val_images = []
val_labels = [] 
for directory_path in glob.glob('gdrive/My Drive/Colab Notebooks/XLA/Splited/valid/*'):
    label = directory_path.split("/")[-1]       
    for img_path in glob.glob(os.path.join(directory_path, "*.jpg")):
        im = tf.keras.utils.load_img(img_path, color_mode ='grayscale')
        new_im = np.asarray(im)
        val_images.append(new_im)
        val_labels.append(label)

val_images = np.array(val_images)
val_labels = np.array(val_labels)

"""Encode Labels"""

import sklearn
from sklearn import preprocessing
## encode labels
label_encoder = sklearn.preprocessing.LabelEncoder() 
label_encoder.fit(val_labels)
val_labels_encoded = label_encoder.transform(val_labels)
label_encoder.fit(train_labels)
train_labels_encoded = label_encoder.transform(train_labels)

print(val_labels_encoded)

"""Calculate GLCM and extract features"""

import pandas as pd
def feature_extract(dataset):
    image_dataset = pd.DataFrame()
    for image in range(dataset.shape[0]): 
        
        df = pd.DataFrame()  
        img = dataset[image, :,:]
  

        GLCM = greycomatrix(img, [1], [0])       
        GLCM_Energy = greycoprops(GLCM, 'energy')[0]
        df['Energy'] = GLCM_Energy
        GLCM_corr = greycoprops(GLCM, 'correlation')[0]
        df['Corr'] = GLCM_corr       
        GLCM_diss = greycoprops(GLCM, 'dissimilarity')[0]
        df['Diss_sim'] = GLCM_diss       
        GLCM_hom = greycoprops(GLCM, 'homogeneity')[0]
        df['Homogen'] = GLCM_hom       
        GLCM_contr = greycoprops(GLCM, 'contrast')[0]
        df['Contrast'] = GLCM_contr

        GLCM2 = greycomatrix(img, [3], [0])       
        GLCM_Energy2 = greycoprops(GLCM2, 'energy')[0]
        df['Energy2'] = GLCM_Energy2
        GLCM_corr2 = greycoprops(GLCM2, 'correlation')[0]
        df['Corr2'] = GLCM_corr2       
        GLCM_diss2 = greycoprops(GLCM2, 'dissimilarity')[0]
        df['Diss_sim2'] = GLCM_diss2       
        GLCM_hom2 = greycoprops(GLCM2, 'homogeneity')[0]
        df['Homogen2'] = GLCM_hom2       
        GLCM_contr2 = greycoprops(GLCM2, 'contrast')[0]
        df['Contrast2'] = GLCM_contr2

        GLCM3 = greycomatrix(img, [3], [np.pi/4])       
        GLCM_Energy3 = greycoprops(GLCM3, 'energy')[0]
        df['Energy3'] = GLCM_Energy3
        GLCM_corr3 = greycoprops(GLCM3, 'correlation')[0]
        df['Corr3'] = GLCM_corr3       
        GLCM_diss3 = greycoprops(GLCM3, 'dissimilarity')[0]
        df['Diss_sim3'] = GLCM_diss3       
        GLCM_hom3 = greycoprops(GLCM3, 'homogeneity')[0]
        df['Homogen3'] = GLCM_hom3       
        GLCM_contr3 = greycoprops(GLCM3, 'contrast')[0]
        df['Contrast3'] = GLCM_contr3

        GLCM4 = greycomatrix(img, [1], [np.pi/4])       
        GLCM_Energy4 = greycoprops(GLCM4, 'energy')[0]
        df['Energy4'] = GLCM_Energy4 
        GLCM_corr4 = greycoprops(GLCM4, 'correlation')[0]
        df['Corr4'] = GLCM_corr4       
        GLCM_diss4 = greycoprops(GLCM4, 'dissimilarity')[0]
        df['Diss_sim4'] = GLCM_diss4       
        GLCM_hom4 = greycoprops(GLCM4, 'homogeneity')[0]
        df['Homogen4'] = GLCM_hom4       
        GLCM_contr4 = greycoprops(GLCM4, 'contrast')[0]
        df['Contrast4'] = GLCM_contr4
        
        GLCM5 = greycomatrix(img, [1], [np.pi/2])       
        GLCM_Energy5 = greycoprops(GLCM5, 'energy')[0]
        df['Energy5'] = GLCM_Energy5  
        GLCM_corr5 = greycoprops(GLCM5, 'correlation')[0]
        df['Corr5'] = GLCM_corr5    
        GLCM_diss5 = greycoprops(GLCM5, 'dissimilarity')[0]
        df['Diss_sim5'] = GLCM_diss5         
        GLCM_hom5 = greycoprops(GLCM5, 'homogeneity')[0]
        df['Homogen5'] = GLCM_hom5      
        GLCM_contr5 = greycoprops(GLCM5, 'contrast')[0]
        df['Contrast5'] = GLCM_contr5 

        image_dataset = image_dataset.append(df)
        
    return image_dataset

train_image_features = feature_extract(train_images)

train_image_features

val_image_features = feature_extract(val_images)

"""KNN model"""

from sklearn.neighbors import KNeighborsClassifier
knn = sklearn.neighbors.KNeighborsClassifier(n_neighbors=4, weights='distance')
knn.fit(train_image_features,train_labels_encoded)

"""Make prediction"""

prediction = knn.predict(val_image_features)

"""Decode Labels"""

prediction = label_encoder.inverse_transform(prediction)

prediction[700:720]

val_labels[700:720]

"""Calculate accuracy"""

from sklearn.metrics import accuracy_score
accuracy = accuracy_score(val_labels,prediction)

print('Accuracy: %.5f'%accuracy)